本周 LeetCode 作业
简单：
用 add first 或 add last 这套新的 API 改写 Deque 的代码
分析 Queue 和 Priority Queue 的源码
删除排序数组中的重复项（Facebook、字节跳动、微软在半年内面试中考过）【done】
旋转数组（微软、亚马逊、PayPal 在半年内面试中考过）
合并两个有序链表（亚马逊、字节跳动在半年内面试常考）【done】
合并两个有序数组（Facebook 在半年内面试常考）【done】
两数之和（亚马逊、字节跳动、谷歌、Facebook、苹果、微软在半年内面试中高频常考）【done---哈希表方法？】
移动零（Facebook、亚马逊、苹果在半年内面试中考过）【done--**】
加一（谷歌、字节跳动、Facebook 在半年内面试中考过）【done】
中等：
设计循环双端队列（Facebook 在 1 年内面试中考过）
困难：
接雨水（亚马逊、字节跳动、高盛集团、Facebook 在半年内面试常考）
下周预习
预习题目：
有效的字母异位词
二叉树的中序遍历
最小的 k 个数
训练场练习
自选并完成 1 道以下【训练场】模拟面试真题：
数组相关：
选择餐馆
链表相关：
合并两个有序链表
栈相关：
视野总和
每日在线用户量
队列相关：
数据流查询
------------------------------------------------------------------------------------------------------------------
1.删除排序数组中的重复项（Facebook、字节跳动、微软在半年内面试中考过）
https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        i = 0 
        n = len(nums)
        if(n>1):
            for j in range(1,n):               
                if(nums[i]==nums[j]):
                    continue
                else:
                    i = i+1
                    nums[i] = nums[j]
            return i+1
        else:
            return n

2.合并两个有序数组
给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。
初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。
链接：https://leetcode-cn.com/problems/merge-sorted-array

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        loc = len(nums1)
        i = m
        j = n 
        if(loc == 1):
            if(n>0):
                if(nums1[0] < nums2[0]):
                    nums1[0] = nums2[0]
        while(i > 0 and j > 0 and loc > -1):
            if(nums1[i-1] > nums2[j-1]):
                i = i - 1
                nums1[loc-1] = nums1[i]               
            elif(nums1[i-1] < nums2[j-1]):
                j = j - 1
                nums1[loc-1] = nums2[j]                
            else:
                i = i - 1
                j = j - 1
                nums1[loc-1] = nums1[i]
                nums1[loc-2] = nums2[j]
                loc = loc - 1
            loc = loc - 1 
        if(j != 0 ):
            nums1[0:j] = nums2[0:j]
3.合并两个有序链表
class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummy = ListNode(0,None);
        if l1 is None:
            return l2
        if l2 is None:
            return l1
        if l1.val <= l2.val:
            dummy.val = l1.val
            dummy.next = self.mergeTwoLists(l1.next,l2)
        else:
            dummy.val = l2.val
            dummy.next = self.mergeTwoLists(l1,l2.next)
        return dummy
4.移动零
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序
class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        j = 0
        n = len(nums)
        for i in range(n):
            if(nums[i]!=0):
                nums[j] = nums[i]
                j = j + 1
        znum = n - j
        for i in range(znum):
            nums[(-1)*(i+1)] = 0 
5.两数之和
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
链接：https://leetcode-cn.com/problems/two-sum
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        n = len(nums)
        for i in range(n):
            for j in range(i+1,n):
                if(nums[i]+nums[j] == target):
                    return [i,j]
6.加一
给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。
链接：https://leetcode-cn.com/problems/plus-one
class Solution(object):
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        n = len(digits)
        plus = 1
        for i in range(n-1,-1,-1):
            if(digits[i] == 9):
                digits[i] = 0
            else:
                digits[i] = digits[i] + 1
                break            
        if(digits[0] == 0):
            return [1]+digits
        else:
            return digits
7.爬楼梯
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
注意：给定 n 是一个正整数
链接：https://leetcode-cn.com/problems/climbing-stairs
class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if(n > 2):
            mem = [1,2]
            for i in range(2,n):
                print(i)
                mem = mem+([mem[i-1] + mem[i-2]]) 
            return mem[n-2] + mem[n-3]
        elif(n==2):
            return 2
        else:
            return 1
8.189. 旋转数组
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
进阶：
    尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
    你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？
链接：https://leetcode-cn.com/problems/rotate-array
class Solution(object):
    def swap(self,nums,l,r):
        while(r>l):
            nums[l],nums[r] = nums[r],nums[l]
            r = r - 1
            l = l + 1
    def rotate(self, nums, k):
        
        """
        :type nums: List[int]
        :type k: int
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        k = k % n
        self.swap(nums,0,n-k-1)
        self.swap(nums,n-k,n-1)
        self.swap(nums,0,n-1)
